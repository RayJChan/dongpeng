#==============================================================  
#Configure Main Scheduler Properties  
#==============================================================
#调度器实例名称
org.quartz.scheduler.instanceName = DopngpengScheduler1
#调度器实例编号自动生成
org.quartz.scheduler.instanceId = AUTO

#==============================================================  
#Configure ThreadPool  
#==============================================================
#线程池实现类
org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool
#执行最大并发线程数量
org.quartz.threadPool.threadCount = 10
#线程优先级
org.quartz.threadPool.threadPriority = 5
#配置是否启动自动加载数据库内的定时任务，默认true
org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread = true

#==============================================================  
#Configure JobStore  
#==============================================================
#设置可以允许的超时时间，超过了触发misfire，未超过就执行任务。单位毫秒。该设置要根据生产环境谨慎设置
org.quartz.jobStore.misfireThreshold = 60000
#持久化方式配置
org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX
#quartz相关数据表前缀名
org.quartz.jobStore.tablePrefix = QRTZ_
#数据源的名称
org.quartz.jobStore.dataSource = dataSource

#开启分布式部署
org.quartz.jobStore.isClustered = true
#分布式节点有效性检查时间间隔，单位：毫秒
org.quartz.jobStore.clusterCheckinInterval = 15000

#==============================================================  
#Non-Managed Configure Datasource  
#==============================================================
#这必须是一个从 LOCKS 表查询一行并对这行记录加锁的 SQL 语句。假如未设置，默认值就是 SELECT * FROM {0}LOCKS WHERE LOCK_NAME = ? FOR UPDATE，
#这能在大部分数据库上工作。{0} 会在运行期间被前面你配置的 TABLE_PREFIX 所替换
org.quartz.jobStore.selectWithLockSQL=SELECT * FROM {0}LOCKS UPDLOCK WHERE LOCK_NAME = ?  