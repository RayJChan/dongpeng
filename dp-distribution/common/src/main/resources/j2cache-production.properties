#J2Cache configuration


#########################################
# Cache Broadcast Method
# values:
# jgroups -> use jgroups's multicast
# redis -> use redis publish/subscribe mechanism
# none -> don't notify the other nodes in cluster
# xx.xxxx.xxxx.Xxxxx your own cache broadcast policy classname that implement net.oschina.j2cache.ClusterPolicy
#########################################

j2cache.broadcast = redis

#\uFFFD\u9CA5\uFFFD\uFFFD\u0368\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD
jgroups.channel.name = j2cache
jgroups.configXml = /network.xml

#########################################
# Level 1&2 provider
# values:
# none -> disable this level cache
# ehcache -> use ehcache2 as level 1 cache
# ehcache3 -> use ehcache3 as level 1 cache
# caffeine -> use caffeine as level 1 cache(only in memory)
# redis -> use redis(hashs) as level 2 cache
# readonly-redis -> use redis as level 2 cache ,but never write data to it. if use this provider, you must uncomment `j2cache.L2.config_section` to make the redis configurations available.
# [classname] -> use custom provider
#########################################

j2cache.L1.provider_class = caffeine
j2cache.L2.provider_class = redis

# When L2 provider isn't `redis`, using `L2.config_section = redis` to read redis configurations
# j2cache.L2.config_section = redis

# Enable/Disable ttl in redis cache data (if disabled, the object in redis will never expire)
j2cache.sync_ttl_to_redis = false

# Whether to cache null objects by default
j2cache.default_cache_null_object = true

#########################################
# Cache Serialization Provider
# values:
# fst -> fast-serialization
# kyro -> kyro
# java -> java standard
# [classname implements Serializer]
#########################################

j2cache.serialization = fst

#########################################
# Ehcache configuration
#########################################

ehcache.configXml = /ehcache.xml

ehcache3.configXml = /ehcache3.xml
ehcache3.defaultHeapSize = 1000

#########################################
# Caffeine configuration
# caffeine.region.[name] = size, xxxx[s|m|h|d]
#
#########################################
caffeine.properties = /caffeine-production.properties

#########################################
# Redis connection configuration
#########################################

#########################################
# Redis Cluster Mode
#
# single -> single redis server
# sentinel -> master-slaves servers
# cluster -> cluster servers (\uFFFD\uFFFD\uFFFD\u077F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0427\uFFFD\uFFFD\u02B9\uFFFD\uFFFD database = 0\uFFFD\uFFFD
# sharded -> sharded servers  (\uFFFD\uFFFD\uFFFD\uB862\uFFFD\uFFFD\uFFFD\u077F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD hosts \uFFFD\uFFFD\u05B8\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u04F3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0427 ; redis://user:password@127.0.0.1:6379/0\uFFFD\uFFFD
#
#########################################

redis.mode = single

#redis storage mode (generic|hash)
redis.storage = generic

## redis pub/sub channel name
redis.channel = j2cache
## redis pub/sub server (using redis.hosts when empty)
redis.channel.host =

#cluster name just for sharded
redis.cluster_name = j2cache

## redis cache namespace optional, default[j2cache]
redis.namespace =

## connection
redis.hosts = r-wz911909a6a33864.redis.rds.aliyuncs.com:6379
#\uFFFD\uFFFD\u02B1\u02B1\uFFFD\u48FA\uFFFD\uFFFD\u03BBms
redis.timeout = 2000
#\uFFFD\uFFFD\u0228\uFFFD\uFFFD\uFFFD\uFFFD
redis.password =Dp123456
redis.database = 1

## redis pool properties
#\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD
redis.maxTotal = 100
#\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDmaxIdle\u02B1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u043B\uFFFD\uFFFD\uFFFD
redis.maxIdle = 10
#\uFFFD\uFFFD\u0421\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDminIdle\u02B1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u00B5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD
redis.minIdle = 1
#\uFFFD\uFFFD\uFFFD\u0234\uFFFD\u02B1\uFFFD\u48FA\uFFFD\uFFFD\u03BBms
redis.maxWaitMillis = 5000
#\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u04F5\uFFFD\uFFFD\uFFFD\u0421\uFFFD\uFFFD\uFFFD\uFFFD\u02B1\uFFFD\uFFFD \uFFFD\uFFFD\u03BBms
redis.minEvictableIdleTimeMillis = 60000

#\u00FF\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u02B1 \uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u013F \uFFFD\uFFFD\uFFFD\u03AA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD : 1/abs(n), \u012C\uFFFD\uFFFD3
redis.numTestsPerEvictionRun = 10
#\uFFFD\u01F7\uFFFD\uFFFD\uFFFD\uFFFD\u00FA\uFFFD\uFFFD\uFFFD\u0233\uFFFD, \u012C\uFFFD\uFFFDtrue
redis.lifo = false
redis.softMinEvictableIdleTimeMillis = 10
#\u02B9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u02B1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01F7\uFFFD\u0279\uFFFD
redis.testOnBorrow = true
#\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u02B1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01F7\uFFFD\u0279\uFFFD
redis.testOnReturn = false
#\uFFFD\u06BF\uFFFD\uFFFD\uFFFD\u02B1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0427\uFFFD\uFFFD, \u012C\uFFFD\uFFFDfalse
redis.testWhileIdle = true
#\uFFFD\uFFFD\uFFFD\u0268\uFFFD\uFFFD\uFFFD\u02B1\uFFFD\uFFFD\uFFFD\uFFFD(\uFFFD\uFFFD\uFFFD\uFFFD) \uFFFD\uFFFD\uFFFD\u03AA\uFFFD\uFFFD\uFFFD\uFFFD,\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u07F3\uFFFD, \uFFFD\uFFFD\u03BBms,\u012C\uFFFD\uFFFD-1
redis.timeBetweenEvictionRunsMillis = 300000
#\uFFFD\uFFFD\uFFFD\u04FA\u013E\uFFFD\u02B1\uFFFD\u01F7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD, false\uFFFD\uFFFD\uFFFD\uCCE3,ture\uFFFD\uFFFD\uFFFD\uFFFD\u05B1\uFFFD\uFFFD\uFFFD\uFFFD\u02B1, \u012C\uFFFD\uFFFDtrue
redis.blockWhenExhausted = false
#\uFFFD\u01F7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDpool\uFFFD\uFFFDjmx\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD, \u012C\uFFFD\uFFFDtrue
redis.jmxEnabled = false